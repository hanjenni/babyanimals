{"version":3,"sources":["utils/tokenService.js","utils/userService.js","pages/SignupPage/SignupPage.jsx","pages/LoginPage/LoginPage.jsx","pages/App/App.jsx","serviceWorker.js","index.js"],"names":["getToken","token","localStorage","getItem","JSON","parse","atob","split","exp","Date","now","removeItem","setToken","setItem","removeToken","getUserFromToken","user","BASE_URL","signup","fetch","method","body","then","res","ok","json","response","console","log","Error","err","tokenService","logout","login","creds","headers","Headers","stringify","getUser","SignUpPage","props","useState","message","passwordError","username","email","password","passwordConf","state","setState","selectedFile","setSelectedFile","handleChange","e","target","name","value","Grid","textAlign","style","height","verticalAlign","Column","maxWidth","Header","as","color","Image","src","Form","onSubmit","preventDefault","formData","FormData","key","append","userService","size","autoComplete","Segment","stacked","Input","iconPosition","placeholder","fluid","icon","onChange","required","type","Field","files","Button","Message","href","LoginPage","App","setUser","handleSignUpOrLogin","path","element","to","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.e1c26a48.chunk.js","sourcesContent":["function setToken(token) {\n    if (token) {\n      // localStorage is given to us by the browser\n      localStorage.setItem('token', token);\n    } else {\n      localStorage.removeItem('token');\n    }\n  }\n  \n  function getToken() {\n    let token = localStorage.getItem('token');\n    if (token) {\n      // Check if expired, remove if it is\n      // atob is a function that decodes a base-64 string\n      const payload = JSON.parse(atob(token.split('.')[1]));\n      // JWT's exp is expressed in seconds, not milliseconds, so convert\n      if (payload.exp < Date.now() / 1000) {\n        localStorage.removeItem('token');\n        token = null;\n      }\n    }\n    return token;\n  }\n  \n  function getUserFromToken() {\n    const token = getToken();\n    return token ? JSON.parse(atob(token.split('.')[1])).user : null;\n  }\n  \n  function removeToken() {\n    localStorage.removeItem('token');\n  }\n  \n  export default {\n    setToken,\n    getToken,\n    removeToken,\n    getUserFromToken\n  };","import tokenService from './tokenService';\n\nconst BASE_URL = '/api/users/';\n\n\n// NOTE THIS IS configured to send of a multi/part form request\n// aka photo \nfunction signup(user) {\n  return fetch(BASE_URL + 'signup', {\n    method: 'POST',\n    body: user\n  })\n  .then(res => {\n    if (res.ok) return res.json();\n    // Probably a duplicate email\n    \n    // Writing your error handling like this allows you to throw the error response \n    // to the catch block where signup occurs,  \n\n//     res.status(400).json({ err: \"Something went wrong\" }); notice err, and response.err match\n    return res.json().then(response => {\n      console.log(response)\n      throw new Error(response.err)\n    })\n  })\n  // Parameter destructuring!\n  .then(({token}) => tokenService.setToken(token));\n  // Setting our token in localStorage in our browser\n  // then we'll be able to use with every request!\n  // The above could have been written as\n  //.then((token) => token.token);\n}\n\nfunction getUser() {\n  return tokenService.getUserFromToken();\n}\n\nfunction logout() {\n  tokenService.removeToken();\n}\n\nfunction login(creds) {\n  return fetch(BASE_URL + 'login', {\n    method: 'POST',\n    headers: new Headers({'Content-Type': 'application/json'}),\n    body: JSON.stringify(creds)\n  })\n  .then(res => {\n    // Valid login if we have a status of 2xx (res.ok)\n    if (res.ok) return res.json();\n    return res.json().then(response => {\n      console.log(response)\n      throw new Error(response.err)\n    })\n  })\n  .then(({token}) => tokenService.setToken(token));\n}\n\n\nexport default {\n  signup, \n  logout,\n  login,\n  getUser\n};\n","import React, { useState } from \"react\";\nimport ErrorMessage from \"../../components/ErrorMessage/ErrorMessage\";\nimport { Button, Form, Grid, Header, Image, Segment, Message } from 'semantic-ui-react';\n\nimport userService from \"../../utils/userService\";\nimport { useNavigate } from \"react-router-dom\";\n\nexport default function SignUpPage(props) {\n  const [error, setError] = useState({\n    message: '',\n    passwordError: false\n  });\n\n\n  const [state, setState] = useState({\n    username: '',\n    email: '',\n    password: '',\n    passwordConf: ''\n\n  });\n\n  const [selectedFile, setSelectedFile] = useState('')\n\n  function handleChange(e){\n    setState({\n      ...state,\n      [e.target.name]: e.target.value\n    })\n  }\n\n  function handleSubmit(e){\n    e.preventDefault();\n    const formData= new FormData();\n    formData.append('photo', selectedFile);\n    for (let key in state) {\n      formData.append(key, state[key]);\n    }\n    userService.signup({...state, selectedFile})\n  }\n\n  function handleFileInput(e){\n    console.log(e.target.files, '<-this is e.target.files')\n    setSelectedFile(e.target.files[0]);\n  }\n\n  return (\n    <Grid textAlign='center' style={{ height: '100vh' }} verticalAlign='middle'>\n      <Grid.Column style={{ maxWidth: 450 }}>\n        <Header as='h2' color='yellow' textAlign='center'>\n          <Image src='/logo.png' /> Sign Up\n        </Header>\n        <Form onSubmit={handleSubmit} size='large' autoComplete='on'>\n          <Segment stacked>\n            <Form.Input\n              name='username'\n              value={state.username}\n              iconPosition='left'\n              placeholder='username'\n              fluid icon='user'\n              onChange={handleChange}\n              required\n            />\n            <Form.Input\n              name='email'\n              type='email'\n              value={state.email}\n              iconPosition='left'\n              placeholder='email'\n              fluid icon='lock'\n              onChange={handleChange}\n              required\n            />\n            <Form.Input\n              name='password'\n              type='password'\n              value={state.password}\n              iconPosition='left'\n              placeholder='Password'\n              onChange={handleChange}\n              required\n\n            />\n            <Form.Input\n              name='passwordConf'\n              type='password'\n              iconPosition='left'\n              placeholder='Confirm Password'\n              value={state.passwordConf}\n              onChange={handleChange}\n              required\n\n            />\n            <Form.Field>\n              <Form.Input\n                type=\"file\"\n                name=\"photo\"\n                placeholder=\"upload image\"\n                onChange={handleFileInput}\n              />\n            </Form.Field>\n            <Button color='yellow' fluid size='large'>\n              Login\n            </Button>\n          </Segment>\n        </Form>\n        <Message>\n          New to us? <a href='#'>Sign Up</a>\n        </Message>\n      </Grid.Column>\n    </Grid>\n  );\n}\n","import React, { useState } from \"react\";\nimport \"./LoginPage.css\";\nimport ErrorMessage from \"../../components/ErrorMessage/ErrorMessage\";\nimport userService from \"../../utils/userService\";\n\nexport default function LoginPage(props) {\n  return (\n    <>\n      <h1>Setup Login Page</h1>\n      <ul>\n        <li>Read the Login Model, You can change it to fit your needs</li>\n        <li>\n          Make sure you read the Login Controller, to know how it is setup to\n          find the user!\n        </li>\n      </ul>\n    </>\n  );\n}\n","import React, { useState } from \"react\";\nimport { Navigate, Route, Routes } from \"react-router-dom\";\nimport \"./App.css\";\nimport SignupPage from \"../SignupPage/SignupPage\";\nimport LoginPage from \"../LoginPage/LoginPage\";\nimport userService from \"../../utils/userService\";\n\nfunction App() {\n  const [user, setUser] = useState(userService.getUser()); // getUser decodes our JWT token, into a javascript object\n  // this object corresponds to the jwt payload which is defined in the server signup or login function that looks like\n  // this  const token = createJWT(user); // where user was the document we created from mongo\n\n  function handleSignUpOrLogin() {\n    setUser(userService.getUser()); // getting the user from localstorage decoding the jwt\n  }\n\n  function handleLogout() {\n    userService.logout();\n    setUser(null);\n  }\n\n  if (user) {\n    return (\n      <Routes>\n        <Route path=\"/\" element={<h1>This is Home Page!</h1>} />\n        <Route\n          path=\"/login\"\n          element={<LoginPage handleSignUpOrLogin={handleSignUpOrLogin} />}\n        />\n        <Route\n          path=\"/signup\"\n          element={<SignupPage handleSignUpOrLogin={handleSignUpOrLogin} />}\n        />\n      </Routes>\n    );\n  }\n\n  return (\n    <Routes>\n      <Route\n        path=\"/login\"\n        element={<LoginPage handleSignUpOrLogin={handleSignUpOrLogin} />}\n      />\n      <Route\n        path=\"/signup\"\n        element={<SignupPage handleSignUpOrLogin={handleSignUpOrLogin} />}\n      />\n      <Route path=\"/*\" element={<Navigate to=\"/login\" />} />\n    </Routes>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css';\nimport './index.css';\nimport App from './pages/App/App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nReactDOM.render(\n  <Router><App/></Router>,\n  document.getElementById('root')\n);\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}